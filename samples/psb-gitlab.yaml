
stages:
  - validate
  - deploy

variables:
  AWS_REGION: us-east-1
  DEV_CLUSTER_NAME: "eks132-psb-paas-eks-cluster-chiran"
  TEST_CLUSTER_NAME: "test-cluster"
  PROD_CLUSTER_NAME: "prod-cluster"

validate:helm:
  stage: validate
  image: prod-cicm.uspto.gov:9996/ecc/oci/ci-tools:latest
  tags:
    - aws_lab
  script:
    - helm lint . -f values.yaml
    - helm lint . -f values.yaml -f environments/dev/values.yaml
    - helm lint . -f values.yaml -f environments/test/values.yaml
    - helm lint . -f values.yaml -f environments/prod/values.yaml
    - |
      for env in dev test prod; do
        namespace=$(yq eval '.global.namespace' environments/${env}/values.yaml)
        if [ -z "$namespace" ] || [ "$namespace" = "null" ]; then
          echo "ERROR: global.namespace not defined in environments/${env}/values.yaml"
          exit 1
        fi
        echo "âœ“ Namespace for ${env}: ${namespace}"
      done



deploy:dev:
  stage: deploy
  image: prod-cicm.uspto.gov:9996/ecc/oci/ci-tools:latest
  tags:
    - aws_lab  # CRITICAL: This ensures job runs on dev account runner
  variables:
    ENVIRONMENT: dev
    RELEASE_NAME: "${CHART_NAME}-dev"
    CLUSTER_NAME: "${DEV_CLUSTER_NAME}"
    AWS_REGION: "${AWS_REGION:-us-east-1}"
  before_script:
    - aws sts get-caller-identity --region ${AWS_REGION} # Verify we're in correct account
    - aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_REGION}
    #- kubectl config current-context
    #- kubectl cluster-info
    # Extract namespace from values file
    - export NAMESPACE=$(yq eval '.global.namespace' environments/${ENVIRONMENT}/values.yaml)
    #- echo "Using namespace: ${NAMESPACE}"
  script:
    - |
      export KUBECONFIG=/root/.kube/config
      # Create namespace if it doesn't exist
      kubectl create ns ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -


    - helm repo add psb1-helm-base-chart https://dev-cicm.etc.uspto.gov/nexus3/repository/psb1-helm-base-chart/
    - helm repo update
    - mkdir charts
    - helm pull psb1-helm-base-chart/psb1-helm-base-chart --version 0.2.2 --destination charts/
    - |
      helm template ${RELEASE_NAME} charts/psb1-helm-base-chart-0.2.2.tgz  \
        -f values.yaml \
        -f environments/${ENVIRONMENT}/values.yaml \
        --namespace ${NAMESPACE} > $NAMESPACE.yaml

      kubectl apply -f $NAMESPACE.yaml

      # Verify deployment
      kubectl rollout status deployment -n ${NAMESPACE} --timeout=300s
      kubectl get all -n ${NAMESPACE}
  only:
    - master
    - /^develop\/.*$/
  when: on_success


# Test Deployment - Runs on Test Account Runner
deploy:test:
  stage: deploy
  image: prod-cicm.uspto.gov:9996/ecc/oci/ci-tools:latest
  tags:
    - aws_lab  # CRITICAL: This ensures job runs on test account runner
  variables:
    ENVIRONMENT: test
    RELEASE_NAME: "${CHART_NAME}-test"
    CLUSTER_NAME: "${TEST_CLUSTER_NAME}"  # Can be overridden
    AWS_REGION: "${AWS_REGION:-us-east-1}"
  before_script:
    - aws sts get-caller-identity
    # Update kubeconfig to authenticate to EKS cluster
    - aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_REGION}
    - kubectl config current-context
    # Extract namespace from values file
    - export NAMESPACE=$(yq eval '.global.namespace' environments/${ENVIRONMENT}/values.yaml)
    - echo "Using namespace:/ ${NAMESPACE}"
  script:
    - |
      echo "Deploying to Test environment..."
      echo "Namespace: ${NAMESPACE}"
      echo "Release: ${RELEASE_NAME}"
      
      # Create namespace if it doesn't exist
      kubectl create ns ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
      
    - export KUBECONFIG=/root/.kube/config
    - helm repo add psb1-helm-base-chart https://dev-cicm.etc.uspto.gov/nexus3/repository/psb1-helm-base-chart/
    - helm repo update
    - mkdir charts
    - helm pull psb1-helm-base-chart/psb1-helm-base-chart --version 0.2.2 --destination charts/
    - |
      helm template ${RELEASE_NAME} charts/psb1-helm-base-chart-0.2.2.tgz  \
        -f values.yaml \
        -f environments/${ENVIRONMENT}/values.yaml \
        --namespace ${NAMESPACE} > $NAMESPACE.yaml

      kubectl apply -f $NAMESPACE.yaml

      # Verify deployment
      kubectl rollout status deployment -n ${NAMESPACE} --timeout=300s
      kubectl get all -n ${NAMESPACE}
  only:
    - master
    - /^release\/.*$/
  when: manual
  needs: ["deploy:dev"]

      
deploy:prod:
  stage: deploy
  image: prod-cicm.uspto.gov:9996/ecc/oci/ci-tools:latest
  tags:
    - aws_lab  # CRITICAL: This ensures job runs on prod account runner
  variables:
    ENVIRONMENT: prod
    RELEASE_NAME: "${CHART_NAME}-prod"
    CLUSTER_NAME: "${PROD_CLUSTER_NAME}"  # Can be overridden
    AWS_REGION: "${AWS_REGION:-us-east-1}"
  before_script:
    - aws sts get-caller-identity
    - aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_REGION}
    - kubectl config current-context
    # Extract namespace from values file
    - export NAMESPACE=$(yq eval '.global.namespace' environments/${ENVIRONMENT}/values.yaml)
    - |
      echo "Production deployment checklist:"
      echo "- Deployment approved by: ${GITLAB_USER_LOGIN}"
      echo "- Current time: $(date)"
      echo "- Namespace: ${NAMESPACE}"
  script:
    - |
      echo "Deploying to Production environment..."
      echo "Namespace: ${NAMESPACE}"
      echo "Release: ${RELEASE_NAME}"
      
      # Create namespace if it doesn't exist
      kubectl create ns ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
      
      # Deploy to production
    - export KUBECONFIG=/root/.kube/config
    - helm repo add psb1-helm-base-chart https://dev-cicm.etc.uspto.gov/nexus3/repository/psb1-helm-base-chart/
    - helm repo update
    - mkdir charts
    - helm pull psb1-helm-base-chart/psb1-helm-base-chart --version 0.2.2 --destination charts/
    - |
      helm template ${RELEASE_NAME} charts/psb1-helm-base-chart-0.2.2.tgz  \
        -f values.yaml \
        -f environments/${ENVIRONMENT}/values.yaml \
        --namespace ${NAMESPACE} > $NAMESPACE.yaml

      kubectl apply -f $NAMESPACE.yaml

      # Verify deployment
      kubectl rollout status deployment -n ${NAMESPACE} --timeout=300s
      kubectl get all -n ${NAMESPACE}

  only:
    - master
    - /^release\/.*$/
  when: manual
  needs: ["deploy:test"]

