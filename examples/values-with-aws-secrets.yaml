# Example values file demonstrating AWS Secrets usage
global:
  namespace: demo-namespace
  region: us-east-1
  labels:
    environment: dev
    team: platform
  serviceAccount:
    create: true
    # Add IAM Role annotation for AWS Secrets access
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/my-app-secrets-role

containers:
  # Example of an API service with AWS Secrets as mounted files
  api:
    enabled: true
    
    deployment:
      replicas: 2
      # Pod annotations for EKS Pod Identity (alternative to IRSA)
      # podAnnotations:
      #   eks.amazonaws.com/identity-association-arn: arn:aws:iam::123456789012:role/my-app-secrets-role
    
    container:
      image:
        repository: my-api-image
        tag: v1.0.0
        pullPolicy: IfNotPresent
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 200m
          memory: 256Mi
      # Define environment variables that use the synced Kubernetes secrets
      env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: api-database-secret
              key: USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-database-secret
              key: PASSWORD
    
    # AWS Secrets Store CSI Driver configuration
    awsSecrets:
      enabled: true
      # Use the global region
      # region: us-west-2    # Override global region if needed
      # Optional failover region for high availability
      failoverRegion: us-west-2
      # Where to mount secrets in the container
      mountPath: "/mnt/secrets-store"
      # File permissions for mounted secrets
      pathPermissions: "0640"
      # AWS Secrets to mount
      secrets:
        # Mount entire secret as a file
        - name: "demo/api/database"
          type: "secretsmanager"
          fileName: "database-creds"
        
        # Mount specific fields from a JSON secret
        - name: "demo/api/config"
          type: "secretsmanager"
          jmesPath:
            apiKey: "api-key"
            endpoint: "api-endpoint"
            
        # Mount a specific version of a secret
        - name: "demo/api/certificate"
          type: "secretsmanager"
          fileName: "tls.crt"
          version: "1"
      
      # Sync AWS Secrets to Kubernetes Secret objects
      syncSecrets:
        - name: api-database-secret
          type: Opaque
          data:
            USERNAME:
              objectName: "demo/api/database"
              objectKey: "username"
            PASSWORD:
              objectName: "demo/api/database" 
              objectKey: "password"
  
  # Example worker without synced secrets - just mounted files
  worker:
    enabled: true
    
    deployment:
      replicas: 2
    
    container:
      image:
        repository: my-worker-image
        tag: latest
        pullPolicy: IfNotPresent
    
    # AWS Secrets configuration - mounted files only
    awsSecrets:
      enabled: true
      mountPath: "/etc/secrets"
      secrets:
        - name: "demo/worker/sqs-credentials"
          type: "secretsmanager"
          fileName: "sqs-credentials.json"
        - name: "demo/worker/api-key"  
          type: "ssmparameter"
          fileName: "api-key.txt"