# Comprehensive sample values file with all possible configurations
global:
  namespace: production
  labels:
    environment: production
    tier: application
    app: sample-app
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
  clusterName: "eks-prod-cluster"
  region: "us-east-1"
  nodeSelector:
    kubernetes.io/os: linux
    node.kubernetes.io/instance-type: m5.large
  tolerations:
    - key: dedicated
      operator: Equal
      value: app
      effect: NoSchedule
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/e2e-az-name
              operator: In
              values:
                - us-east-1a
                - us-east-1b
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - frontend
            topologyKey: kubernetes.io/hostname
  pdb:
    enabled: true
    minAvailable: 1
    maxUnavailable: null
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  imagePullSecrets:
    - name: docker-registry-secret
  networkPolicy:
    enabled: true
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/app-role

# Custom Kubernetes manifests to include
extraDeploy:
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: database-backup
      namespace: "{{ .Values.global.namespace }}"
    spec:
      schedule: "0 2 * * *"
      jobTemplate:
        spec:
          template:
            spec:
              containers:
                - name: backup
                  image: postgres:14
                  command: ["pg_dump"]
              restartPolicy: OnFailure

containers:
  # API Service Example
  api:
    enabled: true
    
    # Deployment settings
    deployment:
      replicas: 3
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0
      revisionHistoryLimit: 5
      annotations:
        deployment.kubernetes.io/revision: "1"
      labels:
        app.component: backend
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
      podLabels:
        role: api-service
      terminationGracePeriodSeconds: 60
      nodeSelector:
        node-pool: application
      tolerations:
        - key: application
          operator: Equal
          value: "true"
          effect: NoSchedule
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - api
              topologyKey: kubernetes.io/hostname
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      imagePullSecrets:
        - name: api-registry-secret

    # Container spec
    container:
      image:
        repository: example/api-service
        tag: v1.2.3
        pullPolicy: Always
      command:
        - "/bin/sh"
        - "-c"
      args:
        - "java -Xms512m -Xmx1g -jar /app/app.jar"
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities:
          drop:
            - ALL
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1000m
          memory: 2Gi
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
          port: http
        initialDelaySeconds: 30
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
      readinessProbe:
        enabled: true
        httpGet:
          path: /ready
          port: http
        initialDelaySeconds: 5
        periodSeconds: 10
        timeoutSeconds: 3
        failureThreshold: 3
        successThreshold: 1
      startupProbe:
        enabled: true
        httpGet:
          path: /health
          port: http
        initialDelaySeconds: 10
        periodSeconds: 5
        timeoutSeconds: 3
        failureThreshold: 12
        successThreshold: 1
      env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: host
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: api-db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-db-credentials
              key: password
      envFrom:
        - configMapRef:
            name: api-common-config
        - secretRef:
            name: api-secrets
      volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: api-temp-storage
          mountPath: /tmp
        - name: api-logs
          mountPath: /var/log/api
      ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
      sidecars:
        - name: log-shipper
          image: fluent/fluent-bit:1.9
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - name: api-logs
              mountPath: /var/log/api
              readOnly: true
      initContainers:
        - name: wait-for-db
          image: busybox:1.33.1
          command: ['sh', '-c', 'until nc -z $DB_HOST $DB_PORT; do echo waiting for database; sleep 2; done;']
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: database-config
                  key: host
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: database-config
                  key: port

    # Service configuration
    service:
      enabled: true
      type: ClusterIP
      ports:
        - port: 80
          targetPort: http
          protocol: TCP
          name: http
        - port: 9090
          targetPort: metrics
          protocol: TCP
          name: metrics
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      labels:
        service.component: api

    # Kubernetes native Ingress (not used when Traefik IngressRoute is enabled)
    ingress:
      enabled: false
      
    # Traefik IngressRoute configuration
    ingressroute:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      entryPoints:
        - web
        - websecure
      routes:
        - match: "Host(`api.example.com`) && PathPrefix(`/v1`)"
          kind: Rule
          priority: 10
          services:
            - name: api
              port: 80
          middlewares:
            - name: api-auth
              namespace: default
            - name: api-ratelimit
        - match: "Host(`api.example.com`) && PathPrefix(`/health`)"
          kind: Rule
          priority: 20
          services:
            - name: api
              port: 80
      tls:
        certResolver: le
        options:
          name: modern-tls
        domains:
          - main: api.example.com
            sans:
              - api-staging.example.com

    # ConfigMaps configuration
    configMaps:
      # Main application config
      app:
        enabled: true
        data:
          application.properties: |
            server.port=8080
            spring.application.name=api-service
            management.endpoints.web.exposure.include=health,info,metrics
            logging.level.root=INFO
            logging.level.org.springframework=WARN
          logback.xml: |
            <configuration>
              <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                  <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                </encoder>
              </appender>
              <root level="INFO">
                <appender-ref ref="CONSOLE" />
              </root>
            </configuration>
      # Database config
      database:
        enabled: true
        data:
          database.conf: |
            host=db.example.com
            port=5432
            database=app_db
            pool.size=10
            pool.idle=2
            pool.timeout=30000

    # Secret configuration (Kubernetes native)
    secret:
      enabled: true
      stringData:
        api-key: "a1b2c3d4e5f6g7h8i9j0"
        encryption-key: "0123456789abcdef0123456789abcdef"
        jwt-secret: "verySecretJwtSigningKey123!"
      
    # AWS Secrets and Configuration Provider (ASCP)
    awsSecrets:
      enabled: true
      region: us-east-1
      failoverRegion: us-west-2
      mountPath: "/mnt/secrets"
      pathPermissions: "0640"
      secrets:
        - name: "prod/api/database"
          type: "secretsmanager"
          fileName: "database.json"
        - name: "prod/api/certificates"
          type: "secretsmanager"
          fileName: "certificates.pem"
        - name: "prod/api/config"
          type: "secretsmanager"
          jmesPath:
            apiKey: "api-key.txt"
            database.username: "db-username.txt"
            database.password: "db-password.txt"
      syncSecrets:
        - name: api-db-credentials
          type: Opaque
          data:
            username:
              objectName: "prod/api/database"
              objectKey: "username"
            password:
              objectName: "prod/api/database"
              objectKey: "password"
        - name: api-cert-secret
          type: kubernetes.io/tls
          data:
            tls.crt:
              objectName: "prod/api/certificates"
              objectKey: "cert"
            tls.key:
              objectName: "prod/api/certificates"
              objectKey: "key"

    # Persistent Volume Claim
    persistentVolumeClaim:
      enabled: true
      storageClassName: gp3
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      annotations:
        volume.beta.kubernetes.io/storage-class: "gp3"

    # Horizontal Pod Autoscaler
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
            - type: Percent
              value: 50
              periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 0
          policies:
            - type: Percent
              value: 100
              periodSeconds: 15
            - type: Pods
              value: 4
              periodSeconds: 15

    # KEDA ScaledObject
    keda:
      enabled: true
      minReplicaCount: 2
      maxReplicaCount: 20
      pollingInterval: 15
      cooldownPeriod: 300
      triggers:
        - type: prometheus
          metadata:
            serverAddress: http://prometheus-server.monitoring.svc.cluster.local:9090
            metricName: http_requests_total
            threshold: "100"
            query: sum(rate(http_requests_total{service="api"}[2m]))
        - type: aws-sqs-queue
          metadata:
            queueURL: https://sqs.us-east-1.amazonaws.com/123456789012/api-queue
            queueLength: "50"
            awsRegion: us-east-1
            identityOwner: operator

    # ServiceMonitor for Prometheus
    serviceMonitor:
      enabled: true
      interval: 15s
      scrapeTimeout: 10s
      path: /metrics
      port: metrics

    # Network policy
    networkPolicy:
      enabled: true
      policyTypes:
        - Ingress
        - Egress
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/component: frontend
            - namespaceSelector:
                matchLabels:
                  name: monitoring
              podSelector:
                matchLabels:
                  app: prometheus
      egress:
        - to:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/component: database
        - to:
            - ipBlock:
                cidr: 10.0.0.0/16
            - ipBlock:
                cidr: 172.16.0.0/12
        - ports:
            - port: 443
              protocol: TCP
          to:
            - ipBlock:
                cidr: 0.0.0.0/0
                except:
                  - 10.0.0.0/8
                  - 172.16.0.0/12
                  - 192.168.0.0/16

    # Additional resources specific to this container
    additionalResources:
      - apiVersion: policy/v1
        kind: PodDisruptionBudget
        metadata:
          name: api-pdb
        spec:
          minAvailable: 2
          selector:
            matchLabels:
              app.kubernetes.io/name: api
              
  # Worker Service Example
  worker:
    enabled: true
    deployment:
      replicas: 2
      strategy:
        type: Recreate
      labels:
        app.component: background-worker
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
    container:
      image:
        repository: example/worker
        tag: v1.0.0
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
        limits:
          cpu: 500m
          memory: 1Gi
      env:
        - name: WORKER_QUEUE
          value: "default"
        - name: WORKER_CONCURRENCY
          value: "5"
      volumeMounts:
        - name: worker-data
          mountPath: /data
    persistentVolumeClaim:
      enabled: true
      size: 5Gi
    # Use KEDA for event-based scaling
    hpa:
      enabled: false
    keda:
      enabled: true
      minReplicaCount: 1
      maxReplicaCount: 10
      triggers:
        - type: aws-sqs-queue
          metadata:
            queueURL: https://sqs.us-east-1.amazonaws.com/123456789012/worker-queue
            queueLength: "5"
            awsRegion: us-east-1